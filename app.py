
"""
Telegram-–±–æ—Ç ¬´–î–µ—Ç–∏ & Panda¬ª ‚Äî –∑–∞–ø–∏—Å—å –±–µ–∑ —Å–ª–æ—Ç–æ–≤ + 4‚Äë–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å—Ç–∞—Ä—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏.
- /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
- /menu ‚Äî —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ /start
- —Ç–µ–∫—Å—Ç "—Å—Ç–∞—Ä—Ç" –∏–ª–∏ "start" –±–µ–∑ —Å–ª–µ—à–∞ ‚Äî —Ç–æ–∂–µ –ø–æ–∫–∞–∂–µ—Ç –º–µ–Ω—é
- /ping ‚Äî –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç
- /count ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
- /export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç CSV (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
"""

from __future__ import annotations

import asyncio
import csv
import os
import re
import sqlite3
import random
from contextlib import closing
from dataclasses import dataclass
from datetime import datetime
from typing import Optional, List

import phonenumbers
import pytz
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8156929581:AAHiEHkJLSZqiupefNjOCJ9nSV5Rsp5NwUI"
ADMIN_CHAT_ID = 5778964874

TZ = pytz.timezone("Europe/Moscow")
EVENT_DATE = datetime(2025, 10, 25, tzinfo=TZ)

DB_PATH = "bookings.db"
CSV_EXPORT = "bookings_export.csv"

WELCOME_TEXT = (
    "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π —á–∞—Å—Ç–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥ –≤ –ù–µ–∫—Ä–∞—Å–æ–≤–∫–µ üåø\n\n"
    "üéâ –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞ –Ω–∞ –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π!\n"
    "üìÖ 25 –æ–∫—Ç—è–±—Ä—è 2025 –≥. (—Å—É–±–±–æ—Ç–∞)\n"
    "üïô –ù–∞—á–∞–ª–æ –≤ 10:00\n"
    "üìç –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ú–∞—Ä—à–∞–ª–∞ –ï—Ä–µ–º–µ–Ω–∫–æ, –¥. 5, –∫–æ—Ä–ø. 5\n\n"
    "–ü–†–û–ì–†–ê–ú–ú–ê –°–¢–†–û–ì–û –î–õ–Ø –î–ï–¢–ï–ô –û–¢ 1,5 –î–û 5 –õ–ï–¢!\n\n"
    "‚ú® –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
    "10:00 ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ\n"
    "10:30 ‚Äî –°–ø–µ–∫—Ç–∞–∫–ª—å –∫—É–∫–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞ üé≠\n"
    "10:40 ‚Äî –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ª–µ—á–µ–±–Ω–æ–π —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–µ + –¥–µ—Ç—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥ü§∏‚Äç‚ôÄÔ∏è\n"
    "11:00 ‚Äî –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤\n\n"
    "üíõ –í—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è!\n"
    "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è–º–∏, —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω—è—Ç–∏—è, "
    "–∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∑–∞–±–æ—Ç—ã –∏ —É—é—Ç–∞ üåº\n\n"
    "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—á–∞—Å—Ç–∏–µ?\n"
    "üëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª, –∏ –º—ã –∑–∞–∫—Ä–µ–ø–∏–º –∑–∞ –≤–∞–º–∏ –º–µ—Å—Ç–æ."
)

# ‚îÄ‚îÄ‚îÄ –ú–æ–¥–µ–ª—å –ë—Ä–æ–Ω–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dataclass
class Booking:
    code: str
    parent: str
    phone_e164: str
    child_age: str
    created_at: str

# ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã –ë–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_columns(conn: sqlite3.Connection) -> List[str]:
    cur = conn.execute("PRAGMA table_info(bookings)")
    return [row[1] for row in cur.fetchall()]

def init_db() -> None:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        # –ù–æ–≤–∞—è —Å—Ö–µ–º–∞
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS bookings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT,
                parent TEXT,
                phone_e164 TEXT UNIQUE,
                child_age TEXT,
                created_at TEXT
            )
            """
        )
        cols = get_columns(conn)
        if "code" not in cols:
            conn.execute("ALTER TABLE bookings ADD COLUMN code TEXT")
        conn.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_bookings_code ON bookings(code)")
        conn.commit()

def find_by_phone(phone_e164: str) -> Optional[Booking]:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute(
            "SELECT code, parent, phone_e164, child_age, created_at FROM bookings WHERE phone_e164 = ?",
            (phone_e164,),
        )
        row = cur.fetchone()
        if row:
            return Booking(*row)
        return None

def code_exists(code: str) -> bool:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT 1 FROM bookings WHERE code = ?", (code,))
        return cur.fetchone() is not None

def generate_unique_code() -> str:
    for _ in range(10000):
        code = f"{random.randint(1, 9999):04d}"
        if not code_exists(code):
            return code
    return datetime.now().strftime("%H%M")

def insert_booking(b: Booking) -> None:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cols = get_columns(conn)
        if "slot" in cols:
            # –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞: –µ—Å—Ç—å NOT NULL slot ‚Üí –ø–æ–ª–æ–∂–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            conn.execute(
                "INSERT INTO bookings (code, parent, phone_e164, child_age, created_at, slot) VALUES (?,?,?,?,?,?)",
                (b.code, b.parent, b.phone_e164, b.child_age, b.created_at, ""),
            )
        else:
            conn.execute(
                "INSERT INTO bookings (code, parent, phone_e164, child_age, created_at) VALUES (?,?,?,?,?)",
                (b.code, b.parent, b.phone_e164, b.child_age, b.created_at),
            )
        conn.commit()

def count_total() -> int:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT COUNT(*) FROM bookings")
        return int(cur.fetchone()[0])

# ‚îÄ‚îÄ‚îÄ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def format_phone_to_e164(raw: str, region: str = "RU") -> Optional[str]:
    raw = raw.strip().replace(" ", "")
    try:
        if raw.startswith("8") and len(raw) == 11:
            raw = "+7" + raw[1:]
        parsed = phonenumbers.parse(raw, region)
        if phonenumbers.is_valid_number(parsed):
            return phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.E164)
    except Exception:
        pass
    return None

def start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="signup:start")]]
    )

# ‚îÄ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Form(StatesGroup):
    parent_name = State()
    phone = State()
    child_age = State()
    confirm = State()

# ‚îÄ‚îÄ‚îÄ –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    init_db()
    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏
    @dp.message(Command("ping"))
    async def ping(msg: Message) -> None:
        await msg.answer("pong")

    @dp.message(CommandStart())
    async def on_start(msg: Message, state: FSMContext) -> None:
        await state.clear()
        await msg.answer(WELCOME_TEXT, reply_markup=start_keyboard())

    @dp.message(Command("menu"))
    async def on_menu(msg: Message, state: FSMContext) -> None:
        await state.clear()
        await msg.answer(WELCOME_TEXT, reply_markup=start_keyboard())

    # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç "—Å—Ç–∞—Ä—Ç" –∏–ª–∏ "start" –±–µ–∑ —Å–ª–µ—à–∞
    @dp.message(StateFilter(None), F.text.as_("t"))
    async def on_any_text(msg: Message, t: str, state: FSMContext) -> None:
        if t is None:
            return
        low = t.strip().lower()
        if low in {"start", "—Å—Ç–∞—Ä—Ç"}:
            await state.clear()
            await msg.answer(WELCOME_TEXT, reply_markup=start_keyboard())

    @dp.callback_query(F.data == "signup:start")
    async def signup_start(cb: CallbackQuery, state: FSMContext) -> None:
        await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è (–∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è):")
        await state.set_state(Form.parent_name)
        await cb.answer()

    @dp.message(Form.parent_name)
    async def on_parent_name(msg: Message, state: FSMContext) -> None:
        name = re.sub(r"\s+", " ", msg.text.strip())
        if len(name) < 2:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
            return
        await state.update_data(parent=name)
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 999 123-45-67):")
        await state.set_state(Form.phone)

    @dp.message(Form.phone)
    async def on_phone(msg: Message, state: FSMContext) -> None:
        phone_e164 = format_phone_to_e164(msg.text)
        if not phone_e164:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –ü—Ä–∏—à–ª–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX")
            return
        if find_by_phone(phone_e164):
            await msg.answer("–≠—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å. –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        await state.update_data(phone_e164=phone_e164)
        await msg.answer("–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –≥–æ–¥–∞ 4 –º–µ—Å—è—Ü–∞):")
        await state.set_state(Form.child_age)

    @dp.message(Form.child_age)
    async def on_child_age(msg: Message, state: FSMContext) -> None:
        age = msg.text.strip()
        if len(age) < 1:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞.")
            return
        await state.update_data(child_age=age)
        data = await state.get_data()
        text = (
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"<b>–†–æ–¥–∏—Ç–µ–ª—å:</b> {data['parent']}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone_e164']}\n"
            f"<b>–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞:</b> {data['child_age']}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm:yes")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm:no")],
        ])
        await msg.answer(text, reply_markup=kb)
        await state.set_state(Form.confirm)

    @dp.callback_query(Form.confirm, F.data.startswith("confirm:"))
    async def on_confirm(cb: CallbackQuery, state: FSMContext) -> None:
        action = cb.data.split(":", 1)[1]
        if action == "no":
            await state.clear()
            await cb.message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start")
            await cb.answer()
            return

        data = await state.get_data()
        code = generate_unique_code()
        booking = Booking(
            code=code,
            parent=data["parent"],
            phone_e164=data["phone_e164"],
            child_age=data["child_age"],
            created_at=datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S %z"),
        )
        insert_booking(booking)

        await cb.message.answer(
            "–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. ‚úÖ\n"
            f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: <b>{booking.code}</b>\n\n"
            "–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: 25.10.2025 (—Å—É–±–±–æ—Ç–∞)\n"
            "–í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –∫ 10:00 –ø–æ –∞–¥—Ä–µ—Å—É:\n"
            "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ú–∞—Ä—à–∞–ª–∞ –ï—Ä–µ–º–µ–Ω–∫–æ, –¥. 5, –∫–æ—Ä–ø. 5\n\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä ‚Äî –ø–æ –Ω–µ–º—É –≤—ã –±—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤. –î–æ –≤—Å—Ç—Ä–µ—á–∏!"
        )

        if ADMIN_CHAT_ID:
            try:
                await cb.bot.send_message(
                    ADMIN_CHAT_ID,
                    (
                        "üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π\n"
                        f"–ö–æ–¥: {booking.code}\n"
                        f"–†–æ–¥–∏—Ç–µ–ª—å: {booking.parent}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking.phone_e164}\n"
                        f"–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {booking.child_age}\n"
                        f"–°–æ–∑–¥–∞–Ω–æ: {booking.created_at}"
                    ),
                )
            except Exception:
                pass

        await state.clear()
        await cb.answer()

    @dp.message(Command("export"))
    async def export_csv(msg: Message) -> None:
        if ADMIN_CHAT_ID and msg.from_user and msg.from_user.id != ADMIN_CHAT_ID:
            return
        rows = [("created_at", "code", "parent", "phone_e164", "child_age")]
        with closing(sqlite3.connect(DB_PATH)) as conn:
            cur = conn.execute("SELECT created_at, code, parent, phone_e164, child_age FROM bookings ORDER BY id DESC")
            rows.extend(cur.fetchall())
        with open(CSV_EXPORT, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerows(rows)
        await msg.answer_document(document=open(CSV_EXPORT, "rb"), caption="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π")

    @dp.message(Command("count"))
    async def count_cmd(msg: Message) -> None:
        if not (msg.from_user and msg.from_user.id == ADMIN_CHAT_ID):
            return
        total = count_total()
        await msg.answer(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è: <b>{total}</b>")

    print("Bot started‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    if not BOT_TOKEN:
        raise SystemExit("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    asyncio.run(main())
    # --- FastAPI –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è Render ---
from fastapi import FastAPI
import uvicorn
import os, asyncio

app = FastAPI()
_polling_task = None

@app.get("/")
async def health():
    return {"status": "ok"}

@app.on_event("startup")
async def _on_startup():
    global _polling_task
    loop = asyncio.get_event_loop()
    _polling_task = loop.create_task(main())

@app.on_event("shutdown")
async def _on_shutdown():
    global _polling_task
    if _polling_task and not _polling_task.done():
        _polling_task.cancel()
        try:
            await _polling_task
        except Exception:
            pass

if __name__ == "__main__":
    uvicorn.run("app:app", host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
