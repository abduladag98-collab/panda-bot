import os
import re
import csv
import sqlite3
import logging
import asyncio
from contextlib import closing
from datetime import datetime
from typing import Optional

import pytz
from fastapi import FastAPI, Request, Response
from aiogram import F, Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    Update,
)

# ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =========
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ========= –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =========
BOT_TOKEN: str = os.getenv("BOT_TOKEN", "8156929581:AAE7Pew7XX6wxnh4Nh_WA4jeVorkHfh4k2A").strip()
ADMIN_CHAT_ID: Optional[int] = 5778964874
PUBLIC_URL: str = os.getenv("PUBLIC_URL", "").rstrip("/")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

logger.info(f"üîë Bot token: {BOT_TOKEN[:10]}...")
logger.info(f"üåê Public URL: {PUBLIC_URL}")
logger.info(f"üëë Admin ID: {ADMIN_CHAT_ID}")

TZ = pytz.timezone("Europe/Moscow")
DB_PATH = "db.sqlite3"
CSV_EXPORT = "bookings_export.csv"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
bot = Bot(
    BOT_TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# ========= –¢–µ–∫—Å—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =========
WELCOME_TEXT = (
    "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π —á–∞—Å—Ç–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥ –≤ –ù–µ–∫—Ä–∞—Å–æ–≤–∫–µ üåø\n\n"
    "üéâ –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞ –Ω–∞ –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π!\n"
    "üìÖ 25 –æ–∫—Ç—è–±—Ä—è 2025 –≥. (—Å—É–±–±–æ—Ç–∞)\n"
    "üïô –ù–∞—á–∞–ª–æ –≤ 10:00\n"
    "üìç –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ú–∞—Ä—à–∞–ª–∞ –ï—Ä–µ–º–µ–Ω–∫–æ, –¥. 5, –∫–æ—Ä–ø. 5\n\n"
    "‚ú® –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
    "10:00 ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ\n"
    "10:30 ‚Äî –°–ø–µ–∫—Ç–∞–∫–ª—å –∫—É–∫–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞ üé≠\n"
    "10:40 ‚Äî –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ª–µ—á–µ–±–Ω–æ–π —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–µ ü§∏‚Äç‚ôÄÔ∏è\n"
    "11:00 ‚Äî –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤\n\n"
    "üíõ –í—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è!\n"
    "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è–º–∏, —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω—è—Ç–∏—è, –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∑–∞–±–æ—Ç—ã –∏ —É—é—Ç–∞ üåº\n\n"
    "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—á–∞—Å—Ç–∏–µ?\n"
    "üëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª, –∏ –º—ã –∑–∞–∫—Ä–µ–ø–∏–º –∑–∞ –≤–∞–º–∏ –º–µ—Å—Ç–æ."
)

def start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="signup:start")]
        ]
    )

# ========= –ë–î =========
def init_db() -> None:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS bookings (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              created_at TEXT NOT NULL,
              code TEXT NOT NULL,
              parent TEXT NOT NULL,
              phone_e164 TEXT NOT NULL,
              child_age TEXT NOT NULL
            )
        """)
        conn.commit()

class Booking:
    def __init__(self, code: str, parent: str, phone_e164: str, child_age: str, created_at: str):
        self.code = code
        self.parent = parent
        self.phone_e164 = phone_e164
        self.child_age = child_age
        self.created_at = created_at

def insert_booking(b: Booking) -> None:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute(
            "INSERT INTO bookings(created_at, code, parent, phone_e164, child_age) VALUES (?, ?, ?, ?, ?)",
            (b.created_at, b.code, b.parent, b.phone_e164, b.child_age),
        )
        conn.commit()

def find_by_phone(phone_e164: str) -> bool:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT 1 FROM bookings WHERE phone_e164 = ? LIMIT 1", (phone_e164,))
        return cur.fetchone() is not None

def count_total() -> int:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT COUNT(*) FROM bookings")
        row = cur.fetchone()
        return int(row[0]) if row else 0

# ========= –í–∞–ª–∏–¥–∞—Ü–∏–∏/—É—Ç–∏–ª–∏—Ç—ã =========
def format_phone_to_e164(text: str) -> Optional[str]:
    digits = re.sub(r"[^\d+]", "", text or "")
    if digits.startswith("+7") and len(re.sub(r"\D", "", digits)) == 11:
        return digits
    digits_only = re.sub(r"\D", "", text or "")
    if digits_only.startswith("8") and len(digits_only) == 11:
        return "+7" + digits_only[1:]
    return None

def generate_unique_code() -> str:
    return f"{datetime.now().timestamp():.6f}".replace(".", "")[-4:]

# ========= FSM =========
class Form(StatesGroup):
    parent_name = State()
    phone = State()
    child_age = State()
    confirm = State()

# ========= –•—ç–Ω–¥–ª–µ—Ä—ã =========

@dp.message(Command("ping"))
async def ping(msg: Message) -> None:
    logger.info(f"üéØ –°—Ä–∞–±–æ—Ç–∞–ª /ping –æ—Ç {msg.from_user.id}")
    await msg.answer("üèì pong! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!")

@dp.message(CommandStart())
async def on_start(msg: Message, state: FSMContext) -> None:
    logger.info(f"üéØ –°—Ä–∞–±–æ—Ç–∞–ª /start –æ—Ç {msg.from_user.id}")
    await state.clear()
    await msg.answer(WELCOME_TEXT, reply_markup=start_keyboard())

@dp.message(Command("menu"))
async def on_menu(msg: Message, state: FSMContext) -> None:
    logger.info(f"üéØ –°—Ä–∞–±–æ—Ç–∞–ª /menu –æ—Ç {msg.from_user.id}")
    await state.clear()
    await msg.answer(WELCOME_TEXT, reply_markup=start_keyboard())

@dp.message(Command("status"))
async def status_cmd(msg: Message) -> None:
    logger.info(f"üìä –°—Ä–∞–±–æ—Ç–∞–ª /status –æ—Ç {msg.from_user.id}")
    total = count_total()
    await msg.answer(f"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}\n‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now(TZ).strftime('%H:%M:%S')}")

@dp.message(Command("export"))
async def export_csv(msg: Message) -> None:
    logger.info(f"üìä –°—Ä–∞–±–æ—Ç–∞–ª /export –æ—Ç {msg.from_user.id}")
    if ADMIN_CHAT_ID and msg.from_user and msg.from_user.id != ADMIN_CHAT_ID:
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        rows = [("created_at", "code", "parent", "phone_e164", "child_age")]
        with closing(sqlite3.connect(DB_PATH)) as conn:
            cur = conn.execute("SELECT created_at, code, parent, phone_e164, child_age FROM bookings ORDER BY id DESC")
            rows.extend(cur.fetchall())
        
        with open(CSV_EXPORT, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerows(rows)
        
        await msg.answer_document(
            document=open(CSV_EXPORT, "rb"), 
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π ({len(rows)-1} –∑–∞–ø–∏—Å–µ–π)"
        )
        logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞–ø–∏—Å–µ–π: {len(rows)-1}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

@dp.message(Command("count"))
async def count_cmd(msg: Message) -> None:
    logger.info(f"üìà –°—Ä–∞–±–æ—Ç–∞–ª /count –æ—Ç {msg.from_user.id}")
    if not (msg.from_user and ADMIN_CHAT_ID and msg.from_user.id == ADMIN_CHAT_ID):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    total = count_total()
    await msg.answer(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è: <b>{total}</b>")

# Callback handlers
@dp.callback_query(F.data == "signup:start")
async def signup_start(cb: CallbackQuery, state: FSMContext) -> None:
    logger.info(f"üéØ –°—Ä–∞–±–æ—Ç–∞–ª signup:start –æ—Ç {cb.from_user.id}")
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è (–∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è):")
    await state.set_state(Form.parent_name)
    await cb.answer()

@dp.callback_query(Form.confirm, F.data.startswith("confirm:"))
async def on_confirm(cb: CallbackQuery, state: FSMContext) -> None:
    logger.info(f"‚úÖ –°—Ä–∞–±–æ—Ç–∞–ª confirm: {cb.data}")
    action = cb.data.split(":", 1)[1]
    if action == "no":
        await state.clear()
        await cb.message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start")
        await cb.answer()
        return

    data = await state.get_data()
    code = generate_unique_code()
    booking = Booking(
        code=code,
        parent=data["parent"],
        phone_e164=data["phone_e164"],
        child_age=data["child_age"],
        created_at=datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S %z"),
    )
    insert_booking(booking)

    await cb.message.answer(
        "–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. ‚úÖ\n"
        f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: <b>{booking.code}</b>\n\n"
        "–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: 25.10.2025 (—Å—É–±–±–æ—Ç–∞)\n"
        "–í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –∫ 10:00 –ø–æ –∞–¥—Ä–µ—Å—É:\n"
        "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ú–∞—Ä—à–∞–ª–∞ –ï—Ä–µ–º–µ–Ω–∫–æ, –¥. 5, –∫–æ—Ä–ø. 5\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä ‚Äî –ø–æ –Ω–µ–º—É –≤—ã –±—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤. –î–æ –≤—Å—Ç—Ä–µ—á–∏!"
    )

    if ADMIN_CHAT_ID:
        try:
            await cb.bot.send_message(
                ADMIN_CHAT_ID,
                (
                    "üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π\n"
                    f"–ö–æ–¥: {booking.code}\n"
                    f"–†–æ–¥–∏—Ç–µ–ª—å: {booking.parent}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking.phone_e164}\n"
                    f"–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {booking.child_age}\n"
                    f"–°–æ–∑–¥–∞–Ω–æ: {booking.created_at}"
                ),
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    await state.clear()
    await cb.answer()

# Form state handlers
@dp.message(Form.parent_name)
async def on_parent_name(msg: Message, state: FSMContext) -> None:
    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è: {msg.text}")
    name = re.sub(r"\s+", " ", (msg.text or "").strip())
    if len(name) < 2:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return
    await state.update_data(parent=name)
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 999 123-45-67):")
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def on_phone(msg: Message, state: FSMContext) -> None:
    logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {msg.text}")
    phone_e164 = format_phone_to_e164(msg.text or "")
    if not phone_e164:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –ü—Ä–∏—à–ª–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX")
        return
    if find_by_phone(phone_e164):
        await msg.answer("–≠—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å. –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    await state.update_data(phone_e164=phone_e164)
    await msg.answer("–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –≥–æ–¥–∞ 4 –º–µ—Å—è—Ü–∞):")
    await state.set_state(Form.child_age)

@dp.message(Form.child_age)
async def on_child_age(msg: Message, state: FSMContext) -> None:
    logger.info(f"üë∂ –ü–æ–ª—É—á–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç: {msg.text}")
    age = (msg.text or "").strip()
    if len(age) < 1:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞.")
        return
    await state.update_data(child_age=age)
    data = await state.get_data()
    text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"<b>–†–æ–¥–∏—Ç–µ–ª—å:</b> {data['parent']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone_e164']}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞:</b> {data['child_age']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm:yes")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm:no")],
    ])
    await msg.answer(text, reply_markup=kb)
    await state.set_state(Form.confirm)

# Fallback handler
@dp.message()
async def unknown_message(msg: Message) -> None:
    logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.id}: {msg.text}")
    await msg.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

# ========= FastAPI + Webhook =========
app = FastAPI(title="Telegram Bot", version="1.0")

@app.get("/")
async def health():
    return {
        "status": "ok", 
        "bot": "active", 
        "timestamp": datetime.now(TZ).isoformat(),
        "records_count": count_total()
    }

@app.get("/health")
async def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now(TZ).isoformat(),
        "service": "telegram-bot"
    }

@app.get("/ping")
async def ping_server():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"message": "pong", "timestamp": datetime.now(TZ).isoformat()}

@app.get("/stats")
async def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    return {
        "total_records": count_total(),
        "server_time": datetime.now(TZ).isoformat(),
        "webhook_url": f"{PUBLIC_URL}/webhook" if PUBLIC_URL else "Not set"
    }

@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ –°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
        
        if PUBLIC_URL:
            webhook_url = f"{PUBLIC_URL}/webhook"
            await bot.set_webhook(
                webhook_url,
                max_connections=40,
                drop_pending_updates=True
            )
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞
            webhook_info = await bot.get_webhook_info()
            logger.info(f"üìã Webhook info: {webhook_info.url}")
            logger.info(f"üìä Pending updates: {webhook_info.pending_update_count}")
        else:
            logger.warning("‚ö†Ô∏è PUBLIC_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        try:
            if PUBLIC_URL:
                await bot.set_webhook(f"{PUBLIC_URL}/webhook")
                logger.info(f"‚úÖ Webhook –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
        except Exception as retry_error:
            logger.error(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {retry_error}")

@app.on_event("shutdown")
async def on_shutdown():
    logger.info("üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        await bot.session.close()
        logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram")
        
        update = Update.model_validate(data, context={"bot": bot})
        await dp.feed_update(bot, update)
        
        return Response(status_code=200)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return Response(status_code=500)
